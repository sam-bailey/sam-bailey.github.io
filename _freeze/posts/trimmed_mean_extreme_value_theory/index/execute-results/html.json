{
  "hash": "7028717b6d72f88d4c16c8e57130ca33",
  "result": {
    "markdown": "---\ntitle: Can we do better than the trimmed mean?\ndate: '2023-05-13'\ncategories:\n  - Julia\n  - Experimentation\n  - Statistics\nimage: ../../_freeze/posts/trimmed_mean_extreme_value_theory/index/figure-html/fig-samples-output-1.svg\nbibliography: references.bib\ncap-location: margin\nabstract: 'Testing out some ideas for dealing with outliers in A/B testing, comparing the trimmed / winsorized means with a new estimator based on a combination of the Pareto or Generalised Pareto distributions and the delta method.'\n---\n\n\n\n::: {.callout-tip}\n## Post insipration\n\nThis post was heavily inspired by the work by @psis on Pareto Smoothed Importance Sampling, which tackles the related problem of how to deal with extreme values in importance sampling.\n:::\n\n## A day in the life of a data scientist\n\nPicture the situation: you're a data scientist / statistician / economist at an e-commerce company. You're working with a team who plan to run an A/B test to evaluate the impact of a new feature or promoption, and critically they want to evaluate the impact of the change on **revenue**. Sounds easy, so you get to work! \n\nYour randomisation and analysis units are visitors, and since the goal is to measure the impact on total revenue, your main metric is revenue per visitor. You plan to perform a t-test against the null hypothesis that the average revenue per visitor is the same in both control and treatment, and if you reject the null hypothesis you'll report the effect size, with a confidence interval, and pop the champaign!\n\nAs a responsible experimenter, you kick things off with a power analysis, to estimate the required sample size you'll need for this test. To do this you run a query to get the variance of the revenue per visitor over the last few weeks. And here, things start to go wrong... your variance is huge! At this rate, you'll have to run your test for months in order to measure any reasonable effect. \n\nSo now what? You plot a histogram of your revenue per visitor metric to see what's going on, and you see something like this:\n\n::: {.cell execution_count=2}\n\n::: {.cell-output .cell-output-display execution_count=6}\n![Hypothetical revenue per visitor histogram. Skewed, with lots of zeros on one side and a few massive outliers on the other side.](index_files/figure-html/fig-revenue-samples-output-1.svg){#fig-revenue-samples}\n:::\n:::\n\n\nAnd here's the problem. The distribution of the metric is highly skewed, with lots of zeros, then some \"normal\" spenders, and then a very small number of extreme spenders - we'll call these our outliers. And it's these outliers that are disproportionatly increasing the variance of your average revenue per visitor estimate, hurting your power, and eventually making you wait months to estimate the impact of your experiment. \n\n## Outliers in A/B testing\n\nThe previous section was a hypothetical story, but I think it's quite a common scenario. But what can be done? My usual steps are:\n\n1. First, check if the outlieres are real. It's often the case that outliers are actually just bad data, in which it might be reasonable to exclude them or fix them.\n1. Do some variance reduction! [Cuped](https://booking.ai/how-booking-com-increases-the-power-of-online-experiments-with-cuped-995d186fff1d) is a very effective method of reducing the variance of your metric based on data from before the start of your experiment. It's always worth trying and it's about as close to a free lunch as you can get when it comes to improving A/B testing power. However, cuped reduces variance, not skew, so it's likely your power will still be hindered by the outliers.\n1. If the previous two steps doesn't reduce your variance sufficiently, then it's time to look at trimming or windsorizing. These are very powerful techniques, but come with a large drawback: **you are introducing bias into your estimates**. \n\n::: {.callout-warning collapse=\"true\"}\n## Don't log transform!!\n\nOn almost every blog I see, when the issue of a skewed metric arises, someone will recommend log-transforming the metric. While this will certainly make your metric less skewed, and may improve power, it's a big no for financial metrics like revenue. \n\nThis is because when you transform your metric, you also change the null hypothesis you are testing and therefore the interpretation of any effect you measure. For revenue, you really care about the effect on the **(arithmetic) mean** revenue per visitor, because improving this is what will translate into improving total revenue. However, the log transform means you are testing for an effect on the **geometric mean**, which is not the same and improving it does not necessarily translate into improving your bottom line, leading to potentially bad business decisions.\n:::\n\nTrimming and windsorizing are specifically designed to deal with outliers and make your estimator more robust. With trimming, you filter out all samples that are above some threshold, while with windsorizing you apply a cap, so that all values above a threshold are capped to that threshold. Both are very effective at reducing  variance, however because you are removing or capping the top X data points, you introruce a potentially large negative bias, so I usually treat it as a bit of a last resort.\n\nBut is this the best we can do? In this post I'm going to explore how we might formalize this problem with extreme value theory, and see if we can find some estimators that perform better than the trimmed or winsorized means. Here, by \"better\", I mean achieving similar levels of variance reduction, while introducing less bias.\n\n## Extreme value theory and power laws\n\n::: {.callout-warning}\n## Disclamer \n\nI'm far from an expert in extrme value theory, I've really only learned about the topic in the last few weeks. Take this section with a pinch of salt. \n:::\n\n*Extreme value theory is a branch of statistics dealing with the extreme deviations from the median of probability distributions.*^[Sorry, this definition is fully plagarised from [Wikipedia](https://en.wikipedia.org/wiki/Extreme_value_theory#:~:text=Extreme%20value%20theory%20or%20extreme,extreme%20than%20any%20previously%20observed.), but it sounds relevant!] This is exactly what we are dealing with here - outliers are messing with our statistics. So perhaps there are some tools from extreme value theory that we can use to reduce the bias in our trimmed / winsorized mean? Say hello to the second theorem in extreme value theory:\n\n> **Second Theorem in Extrme Value Theory**\n> \n> For a wide range of univariate probability distributions, the tail of that distribution can be well modelled by the Generalised Pareto distribution (GPD).\n> \n> -- *@pickands1975statistical, @balkema1974residual*\n\nThis sounds relavent! Perhaps we can describe the outliers in our skewed revenue  distribution as a GPD. So what does a GPD look like? \n\n### The Pareto and Generalised Pareto distributions\n\nThe GPD is a more flexible version of the well known Pareto distribution [@powerlaws], also known as the 80-20 rule. Both the GPD and Pareto distribution are characterized by having \"power law\" tails, where for large X the distribution tends towards:\n\n$$\nP(x) \\rightarrow x^{-m} \\quad \\text{as} \\quad x \\rightarrow \\infty\n$$\n\n::: {.callout-tip collapse=\"true\"}\n## The maths\n\nThe probability density function of the Pareto distribution is given by:\n$$\nP_\\text{pareto}(x | \\alpha, \\theta) = \\frac{\\alpha \\theta^\\alpha}{x^{\\alpha-1}}\n$$\nThis distribution has two parameters, $\\alpha$ and $\\theta$:\n\n* $\\theta$ controls the minimum of the distribution: $x \\in [\\theta, \\infty)$\n* $\\alpha$ controls the slope of the distribution.\n\nThe probability density function of the GPD is given by:\n$$\nP_\\text{GPD}(x | \\mu, \\sigma, \\xi) = \\frac{1}{\\sigma} \\left( 1 + \\xi \\frac{x - \\mu}{\\sigma} \\right)^{-(1/\\xi + 1)}\n$$\n\nThe parameters of this distribution are more complex. In this post I'm going to only look at cases where $\\xi > 0$. In this case:\n\n* $\\mu$ controls the minimum of the distribution: $x \\in [\\mu, \\infty)$\n* $\\sigma$ controls the scale of the distribution. \n* $\\xi$ controls the slope of the power law tail of the distribution. Comparing it to $\\alpha$ for the Pareto distribution, $\\xi = 1 / \\alpha$.\n\nIn the case where $\\mu = \\sigma / \\xi$ the GPD is the same as the Pareto distributon.\n:::\n\nYou can see the power law tails in @fig-pareto below, where I compare the Pareto and GPD distribution with the log-normal distribution, which does not have a power law tail:\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-display execution_count=7}\n![A comparison between the pareto distribution (red), the Generalised Pareto distribution (GPD) (blue), and the log-normal distribution (green). Both axes are log scaled. Pareto has parameters alpha=1.5 and theta=20. GPD has parameters mu=100.0, theta=20.0 and xi=2/3. Log-normal has parameters mu=4.5, sigma=1.0.](index_files/figure-html/fig-pareto-output-1.svg){#fig-pareto}\n:::\n:::\n\n\nThe distributions are plotted on a log-log scale, and you can see that both the Pareto and GPD distributions are linear for large values of $x$ (indicating a power law), while the LogNormal distribution never becomes linear, it is always curving downwards.\n\nThe GPD and Pareto distribution differ at small values of $x$, where the GPD is more flexible and can curve up or down, while the Pareto distribution remains a pure power law for all values of $x$.\n\n### Infinite Variance\n\nPower law type distributions are interesting because depending on the slope of the tail, the population might have infinite mean or infinite variance. Specifically for the GPD and Pareto distributions we have the following three cases:\n\n|                                   | Pareto              | GPD                |\n|-----------------------------------|---------------------|--------------------|\n| 1. Infinite Mean and Variance     | $\\alpha \\leq 1$     | $\\xi \\geq 1$       |\n| 2. Finite Mean, Infinite Variance | $1 < \\alpha \\leq 2$ | $0.5 < \\xi \\leq 1$ |\n| 3. Finite Mean and Variance       | $\\alpha > 2$        | $\\xi \\leq 0.5$     |\n\n: Three important scenarios for the sample mean and variance of the GPD and Pareto distributions. {#tbl-pareto-cases}\n\n**But what does infinte mean or infinite variance really mean?** The *sample* mean or variance is always finite, even if the population distribution from which that sample was drawn has infinite mean or variance. However, if the population distribution has infinite mean / variance, then the sample mean / variance will *not* converge as the sample size approaches infinty. \n\nThis can be seen in @fig-inf-variance below, where I simulate estimating the sample variance as a function of sample size for the Log-Normal and GPD distributions, where the GPD distribution has infinite variance. Each grey line represents one sample, where I calculate the sample variance cumulatively, adding one point at a time. \n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display execution_count=8}\n![The sample variance vs sample size for the GPD (left) and Log-Normal distribution (right). The GPD used here has infinite population variance, so the sample variance does not converge as sample size increases.](index_files/figure-html/fig-inf-variance-output-1.png){#fig-inf-variance}\n:::\n:::\n\n\nYou can see that for the log-normal distribution, as the sample size gets large the variance converges towards the population variance, while for the GPD distribution it does not converge, and instead just keeps increasing. \n\nThis is a problem, because when performing inference about the mean via the t-test, we construct the t-statistic from the sample mean and sample variance. If, for example, we are performing a one-sample t-test to test the null hypothesis that the mean of the population distribution is equal to a specific value $\\mu_0$, we would calculate the t-statistic as:\n\n$$\nt = \\frac{\\hat{\\mu} - \\mu_0}{\\hat{\\sigma} / \\sqrt{n}}\n$$\n\nWhere $\\hat{\\mu}$ is the sample mean, $\\hat{\\sigma}^2$ is the sample variance and $n$ is the sample size. Therefore, refering back to the three cases from @tbl-pareto-cases:\n\n* If we are in case (1) where both the mean and variance are infinite, then there is basically no hope for any inference about the mean, since it's infinite! If you have a distribution with such large outliers that you are in this case, then you'll always struggle to perform any inference about it's mean. I'm not even sure what the interpretation of such an analysis would be...\n* If we are in case (3) then both the mean and variance are finite. This is trivial, and it's likely that the regular t-test based on the sample mean and variance will perform fine. Probably you're data wouldn't even look like it has significant outliers.\n* Case (2) is the interesting one. The mean is finite, so we may want to perform inference on it, however the variance is infinite, which will break the t statisitc which uses the sample variance. \n\nSo to summarise:\n\n1. It's common for the tails of a wide variety of distributions to be well described by the GPD distribution.\n1. Under certain conditions, the GPD distribution can have infinite variance but a finite mean. \n1. This would make any sample drawn from that distribution have a sample variance that does not converge as the sample size increases, and instead the variance will just increase as the sample size increases.\n1. This will break out t-statistic, which requires the sample variance.\n\nThis sounds a lot like the situation we have with outliers in our revenue per visitor metric! Perhaps the tail of that distribution follows a power law, where we have infinite variance. This would explain why our variance is so large, and therefore why our experimental power is so poor! \n\n## Inference about the mean of a power law distribution\n\nSo if we cannot use the sample variance, what can we do? Well really we only use the sample variance so that we can estimated the standard error of the mean, $\\hat{\\sigma}_\\mu$, as:\n\n$$\n\\hat{\\sigma}_\\mu = \\frac{\\hat{\\sigma}}{\\sqrt{n}}\n$$\n\nIs there a way we can do this without the sample variance? Yes, with maximum likelihood estimation and the delta method! This approach takes three steps:\n\n1. Assume a parametric distribution for your population\n1. Fit your distribution to your data using maximum likelihood estimation\n1. Calculate the mean and the standard error of the mean from your maximum likelihood fit. This requires calculating the hessian of the log-likelihood of your data, and using the delta method.\n\n::: {.callout-tip collapse=\"true\"}\n## Detailed method with maths\n\n1. You have a sample of size $n$: $\\left[ X_1, X_2, X_3, ... X_n \\right]$\n1. Assume a parametric distribution for your population: $P(x|\\theta)$, where $\\theta$ is a vector of the parameters of the distribution.\n1. Define the Log Likelihood as: $L(\\theta) = \\sum_{j=1}^n \\ln{(P(X_j|\\theta))}$\n1. Estimate $\\hat{\\theta}$ by maximizing $L(\\theta)$: $\\hat{\\theta} = \\text{arg max}_{\\theta \\in \\Theta} L(\\theta)$\n1. Calculate the [hessian matrix](https://en.wikipedia.org/wiki/Hessian_matrix) of $L(\\theta)$, $H(\\theta)$. This is the matrix of second derivatives of $L$.\n1. Use the hessian matrix to estimate the covariance matrix for the standard errors of $\\hat{\\theta}$ as \n$\\hat{\\Sigma} = -H(\\hat{\\theta})^{-1}$, from [@covmle].\n1. Estimate the maximum likelihood estimate of the mean from $\\hat{\\theta}$, based on the parametric form for the mean of your chosen distribution $P(x|\\theta)$: $\\hat{\\mu} = E(\\hat{\\theta})$.\n1. Use the [delta method](https://en.wikipedia.org/wiki/Delta_method) to estimate the standard error on the mean, $\\hat{\\sigma}_\\mu$, where $\\Delta E(\\theta)$ is the first derivative (jacobian) of the mean function:\n\n$$\n\\hat{\\sigma}_\\mu^2 = \\Delta E(\\hat{\\theta})^T \\cdot \\hat{\\Sigma} \\cdot \\Delta E(\\hat{\\theta})\n$$ {#eq-delta-multivariate}\n\nNote: if the parameters are all independent, meaning the covariance matrix is a diagonal matrix, then the above equation simplifies to:\n\n$$\n\\hat{\\sigma}_\\mu^2 = \\sum_i \\left| \\frac{\\partial E}{\\partial \\theta_i} \\right|^2 \\hat{\\sigma}_i^2\n$$ {#eq-delta-indep}\n\nWhere $\\sigma_i^2$ are the diagonal elements of $\\hat{\\Sigma}$.\n:::\n\nThis method is nice because it doesn't require us to estimate the sample variance at any point, so we are able to estimate the mean and standard error on the mean, even when the population variance is infinite!\n\nThis method does, however, have some drawbacks - you need to make an assumption about the parameteric form of the population distribution, and if that is incorrect it's very likely the estimator will be biased. Also, even if the parametric form is correctly specified, it's usually the case that the maximum likelihood estimator is not unbiased by default, it usually requires some bias correction to achieve that. This goes beyond the scope of this blog post, but would certainly be possible to explore.\n\nNow let's see how this will work with the GPD and Pareto distributions.\n\n### The Pareto (Hill) estimator\n\nWhile the more basic Pareto distribution might not have as much flexibility as the GPD, and therefore might not fit the tail of your distribution as well, the maximum likelihood estimate can be calculated analytically, making it much simpler and faster to implement. \n\nThe maximum likelihood estimator of the Pareto distribution is often known as the Hill estimator, and the parameters are calculated as follows (see @paretoest for the derivation):\n\n$$\n\\hat{\\theta} = \\min{(X_j)}\n$$\n$$\n\\hat{\\alpha} = \\frac{n}{\\sum_{j=1}^n \\ln{\\frac{X_j}{\\hat{\\theta}}}} = \\frac{n}{\\left( \\sum_{j=1}^n \\ln{X_j} \\right) - n \\ln{\\hat{\\theta}}}\n$$\n\nThe maximum likelihood estimator for the mean and standard error are then calculated from these parameters as:\n\n::: {.callout-tip collapse=\"true\"}\n## Derivation of the mean and standard error\n\nThe mean of the Pareto distribution is given by:\n$$\n\\mu(\\theta, \\alpha) = \\frac{\\theta \\alpha}{\\alpha - 1}\n$$\n\nThe parameters are independent, so there is no covariance. Their standard errors are given by @malik1970estimation (via [wikipedia](https://en.wikipedia.org/wiki/Pareto_distribution#Estimation_of_parameters)) as:\n\n$$\n\\hat{\\sigma}_\\alpha = \\frac{\\hat{\\alpha}}{\\sqrt{n}}\n$$\n\n$$\n\\hat{\\sigma}_\\theta = \\frac{\\theta \\sqrt{\\alpha n}}{(\\alpha n - 1) \\sqrt{\\alpha n - 2}} \\underset{n \\rightarrow \\infty}{\\approx} \\frac{\\theta}{\\alpha n}\n$$\n\nWe can calculate the standard error on the mean using @eq-delta-indep:\n\n$$\n\\hat{\\sigma}_\\mu^2 = \\left| \\frac{\\partial \\mu}{\\partial \\alpha} \\right|^2 \\hat{\\sigma}_\\alpha^2 + \\left| \\frac{\\partial \\mu}{\\partial \\theta} \\right|^2 \\hat{\\sigma}_\\theta^2\n$$\n\nThe two derivatives are:\n\n$$\n\\frac{\\partial \\mu}{\\partial \\alpha} = \\frac{-\\theta}{(\\alpha - 1)^2}\n$$\n\n$$\n\\frac{\\partial \\mu}{\\partial \\theta} = \\frac{\\alpha}{(\\alpha - 1)}\n$$\n\nSo finally substituting it all in we can derive the following equation for the standard error on the mean:\n\n$$\n\\hat{\\sigma}_\\mu = | \\hat{\\mu} | \\sqrt{ \\frac{1}{n(\\alpha - 1)^2} +  \\frac{1}{\\alpha^2 n^2} }\n$$\n:::\n\n$$\n\\hat{\\mu}_\\text{pareto} = \\frac{\\hat{\\theta} \\hat{\\alpha}}{\\hat{\\alpha} - 1}\n$$\n$$\n\\hat{\\sigma}_{\\mu, \\text{pareto}} = | \\hat{\\mu} | \\sqrt{ \\frac{1}{n(\\alpha - 1)^2} +  \\frac{1}{\\alpha^2 n^2} }\n$$\n\nThis is implemented in Julia below:\n\n\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nfunction hill_estimator(x::Vector{Float64})\n\tn = length(x)\n\n\t# Maximum likelihood estimates of the pareto parameters\n\tθ = minimum(x)\n\tα = n / (sum(log.(x)) - n * log(θ))\n\n\tif α <= 1.0\n\t\t# If alpha is less than 1, the mean is infinite. \n\t\t# In this case this estimator won't work, so fall\n\t\t# back to the sample mean and variance.\n\t\treturn sample_mean_variance_estimator(x)\n\tend\n\n\t# Estimate the mean and standard error from the MLE parameters\n\tμ = α * θ / (α - 1)\n\tσ = abs(μ) * sqrt( 1 / (n * (α - 1)^2) +  1 / (α * n)^2 )\n\n\t# Return a struct holding the estimated mean and standard error\n\treturn EstimatorResult(μ, σ) \nend\n```\n:::\n\n\n### The GPD estimator\n\nFor the GPD estimator it's more complicated, because there is no closed form analytical solution to the maximum likelihood estimation. This is a well known challenge in extreme value theory and many methods have been proposed to fit the GPD to a sample. \n\nHere I will be using the method proposed by @zhang2009new, which was already implemented in the `ParetoSmooth.jl` package. I will then use the great automatic differentiation built into Julia in `ForwardDiff.jl` to estimate the gradient and hessian, which I use to estimate the standard error on the mean via @eq-delta-multivariate. \n\nThe full implementation in Julia is here:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nusing ParetoSmooth: gpd_fit\nusing ForwardDiff: gradient, hessian\n\nfunction gpd_log_pdf(params::AbstractVector, x::Vector{Float64})\n\tsum(logpdf.(GeneralizedPareto(params...), x))\nend\n\nfunction gpd_mean(params::AbstractVector)\n\tmean(GeneralizedPareto(params...))\nend\n\nfunction gpd_estimator(x::Vector{Float64})\n\tn = length(x)\n\n\t# Estimate the GPD parameters numerically\n\tu = minimum(x)\n\tx_centered = x .- u\n\tξ, σ = gpd_fit(x_centered, 1.0; sort_sample=true, wip=false)\n\tparams = [u, σ, ξ]\n\n\tif ξ >= 1.0\n\t\t# If xi is greater than 1, the mean is infinite. \n\t\t# In this case this estimator won't work, so fall\n\t\t# back to the sample mean and variance.\n\t\treturn sample_mean_variance_estimator(x)\n\tend\n\n\t# Perform the automatic differentiation to get the \n\t# required gradient and hessian\n\tH = hessian(z -> gpd_log_pdf(z, x), params)\n\tΣ = (-1 * H) ^ -1\n\tdμ = gradient(gpd_mean, params)\n\n\t# Estimate the mean and the standard error\n\tμ = gpd_mean(params)\n\tv = transpose(dμ) * Σ * dμ\n\n\t# Return a struct holding the estimated mean and standard error\n\treturn EstimatorResult(μ, sqrt(v))\nend\n```\n:::\n\n\nAs an aside, this really shows off some of the strengths of Julia - I was able to implement this quite complex method in such a short and easy to read piece of code. However, as it's a numerical solution it will run slower and be less stable than the analytical Hill estimator for the Pareto distribution.\n\n### How do these estimators perform?\n\nTo evaluate these estimators, I ran some simulations. First I simulated data coming from the Pareto and GPD distributions, with finite mean but infinite variance. Since I simulate this data I know the true population mean, so I can compare the estimators and see how well they do at estimating the population mean. I then repeat this process many times, each time collecting the estimated population mean and standard error. \n\nI compare three estimators:\n\n1. **The sample mean / variance estimator.** This is the standard method of estimating the population mean used in the t-test. \n1. **The Hill estimator.** This is the maximum likelihood estimator based on the assumption that the data comes from a Pareto distribution.\n1. **The GPD estimator.** This is the maximum likelihood estimator based on the assumption that the data comes from a GPD distribution. \n\n\n\n#### Testing on Pareto data\n\nFirst let's look at how the estimators perform on data that came from a Pareto distribution. As expected, @fig-evt-estimator-comparison-pareto shows that the baseline method of using the sample mean doesn't work well. It has skewed estimates, with high variance. However, both the hill estimator and the GPD estimator perform much better, with the estimates centered on the true population mean and with much lower variance.\n\n::: {.cell execution_count=9}\n\n::: {.cell-output .cell-output-display execution_count=13}\n![Distribution of estimates for a Pareto population distribution, with alpha=1.5 and theta=20.](index_files/figure-html/fig-evt-estimator-comparison-pareto-output-1.svg){#fig-evt-estimator-comparison-pareto}\n:::\n:::\n\n\nNow we can quantify the total error that the estimator makes as the mean squared error:\n\n$$\n\\text{MSE} = E[(\\hat{\\mu} - \\mu)^2]\n$$\n\nThis is a convenient metric to use because we can break it down in terms of bias and variance:\n\n$$\n\\text{bias} = (E[\\hat{\\mu}] - E[\\mu])^2\n$$\n\n$$\n\\text{variance} = E[(\\hat{\\mu} - E[\\hat{\\mu}])^2]\n$$\n\n$$\n\\text{MSE} = \\text{bias} + \\text{variance}\n$$\n\nBelow you can see how the bias, variance and MSE compare. In this case the bias is low for all methods, while the Hill estimator has the lowest variance and MSE, closely followed by the GPD estimator. \n\n::: {.cell execution_count=10}\n\n::: {.cell-output .cell-output-display execution_count=14}\n![Average performance of estimators for a Pareto population distribution, with alpha=1.5 and theta=20. MSE is the Mean Squared Error of the estimates vs the true population mean, the variance is the variance of the estimates, and the bias is the squared difference between the average of the estimates and the true population mean. Ideally we want bias=0 and then MSE and variance as small as possible.](index_files/figure-html/fig-evt-estimator-stats-comparison-pareto-output-1.svg){#fig-evt-estimator-stats-comparison-pareto}\n:::\n:::\n\n\nFinally, just having a good estimate of the mean is not enough - we need to be able to estimate the standard error on the mean reliably for the estimator to be useful for A/B testing.\n\nTo validate whether the estimate of the standard error is good, I look at the distribution of standardised residuals, which is the difference between the estimated mean and the true population mean, divided by the standard error:\n\n$$\n\\text{standardised residual} = \\frac{\\hat{\\mu} - \\mu}{\\hat{\\sigma}_\\mu}\n$$\n\nIf the standard errors are good, the standardised residuals should roughly follow a t-distribution with mean = 0, standard deviation = 1 and degrees of freedom = n - 1. \n\nWe see below that the Hill estimator is good for both sample sizes, while the GPD works well for the larger sample size, but is not as good for the small sample size. The sample mean and variance is poor, again showing the skewed shape. \n\n::: {.cell execution_count=11}\n\n::: {.cell-output .cell-output-display execution_count=15}\n![A comparison of the standardised errors of the different estimators for a Pareto population distribution. The t-test assumes that this statistic is approximately t-distributied, with d.o.f = samples size - 1. This expected distribution is shown in red. If the distribution matches, then you can expect the confidence intervals you calculate to have good coverage.](index_files/figure-html/fig-evt-estimator-normed-comparison-pareto-output-1.svg){#fig-evt-estimator-normed-comparison-pareto}\n:::\n:::\n\n\nSo overall the Hill and GPD estimators work well for Pareto distributed data, with the Hill estimator performing slightly better. But this is expected, because the data was drawn from the Pareto distribution, which is exactly what the Hill estimator expects. So what happens if the data comes from a GPD distribution?\n\n#### Testing on GPD data\n\nHere I do the same analysis again, but this time using data coming from a GPD distribution for my testing. This distribution is more complex, so will be a harder test for the Hill estimator, as it breaks the parametric assumption we made. \n\nFirst looking at the distributions of the mean estimates, we see again that the mean / variance estimator is very skewed, and the GPD estimator looks good. However, this time the Hill estimator is **very** bad. It's not skewed - the estimates have a nice, normally distributed shape, but they are not even nearly centered on the true population mean. \n\n::: {.cell execution_count=12}\n\n::: {.cell-output .cell-output-display execution_count=16}\n![Distribution of estimates for a GPD population distribution, with mu=100, theta=20.0, xi=2/3.](index_files/figure-html/fig-evt-estimator-comparison-gpd-output-1.svg){#fig-evt-estimator-comparison-gpd}\n:::\n:::\n\n\nThis is an example of the bias that can easily be introduced with this method. Becuase we made an assumption about the parametric form of the population distribution, and got that assumption wrong, the mean estimate is highly biased. \n\nYou can see it clearly in the MSE and bias results in figure @fig-evt-estimator-stats-comparison-gpd. The hill estimator has low variance, but high bias, meaning that overall the MSE is much worse than the GPD estimator. Interestingly, even with this high bias it still has a lower MSE than the baseline sample mean / variance estimator, because the variance of the baseline mean/variance estimator is so high! This wouldn't hold in general though, probably with a higher sample size or slightly different parameters the hill estimator would perform the worst of all.\n\n::: {.cell execution_count=13}\n\n::: {.cell-output .cell-output-display execution_count=17}\n![Average performance of estimators for a GPD population distribution, with mu=100, theta=20.0, xi=2/3. MSE is the Mean Squared Error of the estimates vs the true population mean, the variance is the variance of the estimates, and the bias is the squared difference between the average of the estimates and the true population mean. Ideally we want bias=0 and then MSE and variance as small as possible.](index_files/figure-html/fig-evt-estimator-stats-comparison-gpd-output-1.svg){#fig-evt-estimator-stats-comparison-gpd}\n:::\n:::\n\n\nFinally we can check the standardised residuals again, and as expected the hill estimator is far away from the expected t-distribution. THe GPD estimator again works best, closely matching the t-distribution for the larger sample size. \n\n::: {.cell execution_count=14}\n\n::: {.cell-output .cell-output-display execution_count=18}\n![A comparison of the standardised errors of the different estimators for a GPD population distribution, where the standardised error is the difference between the estimated mean and the population mean, divided by the estimated standard deviation. The t-test assumes that this statistic is approximately t-distributied, with d.o.f = samples size - 1. This expected distribution is shown in red. If the distribution matches, then you can expect the confidence intervals you calculate to have good coverage.](index_files/figure-html/fig-evt-estimator-normed-comparison-gpd-output-1.svg){#fig-evt-estimator-normed-comparison-gpd}\n:::\n:::\n\n\nSo it seems that the GPD distribution works better in general, but if the assumptions of the hill estimator are met (i.e. the samples come from a Pareto distribution), then the hill estimator is better. Of course, the GPD estimator will fail in the same way that the hill estimator did if we were to test it on a dataset that breaks it's assumptions, it's just a more flexible distribution so its assumptions are less likely to break. \n\n## Appling extreme value theory to the trimmed mean\n\nNow as both the Hill estimator and GDP estimator outperform the simple mean/variance estimator for power-law type data, we can try to apply them to our revenue A/B testing problem. However, we want to use the new estimators **only in the tail**. The rest of the distribution is unlikely to be power-law distributed, so the new estimators would fail there.\n\nThis is where the comparison with the trimmed and windsorised means comes in. In both of those methods, an arbitrary threshold is chosen, and all values that are above that threshold are designated as outliers and either ignored or capped. But what if we were to keep the outliers as they are, and use our new estimators on those, while the non-outliers are estimated by the regular mean-variance estimator. We can then combine the two estimates to get the overall estimate of the mean and the standard error for the whole sample.\n\n::: {.callout-tip collapse=\"true\"}\n## Detailed method with maths\n\n1. Set the trimming quartile to split the data into \"outliers\" and \"inliers\". This is an arbitrary percentile of the distribution, and typically only a small percentage of the data should be classified as outliers. \n2. Estimate the mean and standard error for the inliers and outliers separately. Now you should have the following stats:\n\n$$\n\\hat{\\mu}_\\text{out}, \\hat{\\sigma}_{\\mu, \\text{out}} = \\text{Estimated mean and standard error for outliers.}\n$$\n\n$$\n\\hat{\\mu}_\\text{in}, \\hat{\\sigma}_{\\mu, \\text{in}} = \\text{Estimated mean and standard error for inliers.}\n$$\n\n$$\nw_\\text{in}, w_\\text{out} = \\text{The fraction of datapoints assigned to inliers / outliers.}\n$$\n\n$$\nn = \\text{Total number of datapoints in the sample.}\n$$\n\n3. Now we can combine the estimates to get the estimated mean and standard error for the whole sample. This method of combining the results together is built on top of the fact that the overall distribution can be thought of as a mixture of two distributions - the outliers and inliers. So we can combine the moments of the distribution as if they are a mixture (see [wikipedia](https://en.wikipedia.org/wiki/Mixture_distribution#Moments)).\n\n$$\n\\hat{\\mu} = w_\\text{in} \\hat{\\mu}_\\text{in} + w_\\text{out} \\hat{\\mu}_\\text{out}\n$$\n\n$$\n\\hat{\\sigma}_\\mu = \\sqrt{w_\\text{in}^2 \\hat{\\sigma}_{\\mu, \\text{in}}^2 + w_\\text{out}^2 \\hat{\\sigma}_{\\mu, \\text{out}}^2 + \\frac{w_\\text{in} \\hat{\\mu}_\\text{in}^2 + w_\\text{in} \\hat{\\mu}_\\text{in}^2 - \\hat{\\mu}}{n}}\n$$\n\nNote - the above equation for $\\hat{\\sigma}_\\mu$ is slightly different to what you'll see in wikipedia. This is because we are combining the standard error on the mean, not the standard deviations.\n:::\n\nTo test this out, I'll create a synthetic dataset which is a mixture of a GPD and two lognormal distributions. This will make the main distribution bimodal (and so not too easy for our method) but with a power law tail that gives it infinite variance. This distribution is shown in @fig-samples. \n\n::: {.cell execution_count=15}\n\n::: {.cell-output .cell-output-display execution_count=19}\n![Histogram of samples from simulated data (blue), and the theoretical PDF (orange).](index_files/figure-html/fig-samples-output-1.svg){#fig-samples}\n:::\n:::\n\n\nAgain I perform very similar simulations to the previous section - estimating the MSE, variance, bias and the MSE of the standardised residuals. In an ideal world, the MSE and variance will be as low as possible, the bias will be 0, and the MSE of the standardised residuals will be as close to 1 as possible. I also calculate the coverage of 95% confidence intervals of the estimates, which is the percentage of times that the true population mean is within the 95% confdience intervals of the estimate. If the estimator is working well it should cover the true value 95% of the time. I calculate all these metrics as a function of the trimming quantile.\n\nHere I will compare the following estimators:\n\n1. **The simple mean / variance estimator.** This is the standard method of estimating the population mean used in the t-test. It is independent of the trimming quintile.\n1. **The trimmed mean / variance estimator.** The data is trimmed at the trimming quintile before being fed into the sample mean / variance estimator, meaning any samples above the trimming quintile are excluded.\n1. **The winsorized mean / variance estimator.** The data is winsorized at the trimming quintile before being fed into the sample mean / variance estimator, meaning any samples above the trimming quintile are capped at the trimming quintile.\n1. **The hill tail estimator.** This estimator uses the hill estimator for the samples above the trimming quntile, and the sample mean / variance estimator for the samples below, and then merges the results together.\n1. **The GPD tail estimator.** This estimator uses the GPD estimator for the samples above the trimming quntile, and the sample mean / variance estimator for the samples below, and then merges the results together.\n\nThe simulation results are shown below in @fig-trimming-sim-by-metric.\n\n\n\n::: {.cell execution_count=17}\n\n::: {.cell-output .cell-output-display execution_count=21}\n![Performance of the different trimming methods based on various metrics. The MSE and variance should be as small as possible. The Bias should be as close to 0.0 as possible, the Standardised MSE should be 1.0 and the 95% coverage should be 0.95.](index_files/figure-html/fig-trimming-sim-by-metric-output-1.svg){#fig-trimming-sim-by-metric}\n:::\n:::\n\n\nThese results are interesting and in my opinion very promising for this approach!\n\n* The simple mean is the least biased of all the methods, but does not have good coverage of standardised MSE, indicating that the confidence intervals would not work well for this estimator, breaking our A/B tests.\n* The trimmed and winsorized means both behave as expected. The more we trim, the bias increases, and the variance decreases. Overall, the increase in bias is larger than the decrease in variance, meaning that the MSE gets worse. And the bias is so large that the coverage is terrible - the confidence intervals never contain the true population mean. This demonstrates why the trimmed and winsorized means are so difficult to use, because while the variance decreases, you introduce significant bias.\n* Our new estimators seem to work well, as long as the trimming quntile is not too large. Both have good coverage and standardised MSE, meaning that can be more reliably used as A/B testing metrics. The variance, bias and MSE are closer to the values for the simple mean. This means we get similar performance on average, but with a better behaved estimator that we can construct reliable confidence intervals for.\n* The hill tail estimator works better than the GPD tail estimator as long as the trimming quintile is kept below ~1%. Above that, the coverage of the hill estimator deteriorates, while the GPD tail estimator maintains its coverage until ~10%. This is expected because the GPD tail estimator is a more general distribution, so can describe a bigger portion of the tail which is not exactly Pareto distributed. \n* The GPD tail estimator is less robust. This is likely because of the numerical estimation method. Between 1% and 10% the variance, bias and MSE go extremely high. \n\nOverall, based on this, I think the hill estimator has the most promise. While it breaks down at high trimming quantiles, as long as the correct trimming quantile is chosen it works well. It is also computationally simpler than the GPD estimator, because it has an analytical soltuion.\n\n## Summary\n\nSo it looks like we might be able to do better than the trimmed or winsorized means! This is still early stages, more work needs to be done to test this, but overall the hill-tail estimator has better coverage than the regular sample mean, while maintaining a good level of bias and variance.\n\nSome interesting next steps would be to select the trimming quantile automatically, for example using a similar method to @powerlawsempirical, as the hill estimator is very sensitive to this choice, or exploring bias corrections to the MLE estimates. \n\n## Execution Details\n\n::: {.cell execution_count=18}\n\n::: {.cell-output .cell-output-stdout}\n```\nInstalled packages:\nStatsPlots (\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n0.15.5)\nParetoSmooth (0.7.4)\nLaTeXStrings (1.3.0)\nForwardDiff (0.10.35)\nDistributions (0.25.92)\nStatsBase (0.33.21)\n\nExecution time: \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n10 minutes, 15 seconds, 685 milliseconds\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}